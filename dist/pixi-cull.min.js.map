{"version":3,"file":"pixi-cull.min.js","sources":["../node_modules/tslib/tslib.es6.js","../code/simple.ts","../code/spatial-hash.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { DisplayObjectWithCulling, AABB } from './types'\n\nexport interface SimpleOptions {\n    visible?: string\n    dirtyTest?: boolean\n}\n\nconst defaultSimpleOptions = {\n    visible: 'visible',\n    dirtyTest: false,\n}\n\nexport interface SimpleStats {\n    total: number\n    visible: number\n    culled: number\n}\n\ntype DisplayObjectWithCullingArray = DisplayObjectWithCulling[] & { staticObject?: boolean }\n\nexport class Simple {\n    public options: SimpleOptions\n    public visible: string\n    public dirtyTest: boolean\n    protected lists: DisplayObjectWithCullingArray[]\n\n    /**\n     * Creates a simple cull\n     * Note, options.dirtyTest defaults to false. Set to true for much better performance--this requires\n     * additional work to ensure displayObject.dirty is set when objects change)\n     *\n     * @param {object} [options]\n     * @param {boolean} [options.visible=visible] parameter of the object to set (usually visible or renderable)\n     * @param {string} [options.dirtyTest=false] only update the AABB box for objects with object[options.dirtyTest]=true; this has a HUGE impact on performance\n     */\n    constructor(options: SimpleOptions = {}) {\n        options = { ...defaultSimpleOptions, ...options }\n        this.visible = options.visible\n        this.dirtyTest = typeof options.dirtyTest !== 'undefined' ? options.dirtyTest : true\n        this.lists = [[]]\n    }\n\n    /**\n     * add an array of objects to be culled, eg: `simple.addList(container.children)`\n     * @param {Array} array\n     * @param {boolean} [staticObject] set to true if the object's position/size does not change\n     * @return {Array} array\n     */\n    addList(array: DisplayObjectWithCullingArray, staticObject?: boolean): object[] {\n        this.lists.push(array)\n        if (staticObject) {\n            array.staticObject = true\n        }\n        const length = array.length\n        for (let i = 0; i < length; i++) {\n            this.updateObject(array[i])\n        }\n        return array\n    }\n\n    /**\n     * remove an array added by addList()\n     * @param {Array} array\n     * @return {Array} array\n     */\n    removeList(array: DisplayObjectWithCullingArray): DisplayObjectWithCullingArray {\n        this.lists.splice(this.lists.indexOf(array), 1)\n        return array\n    }\n\n    /**\n     * add an object to be culled\n     * NOTE: for implementation, add and remove uses this.lists[0]\n     *\n     * @param {DisplayObjectWithCulling} object\n     * @param {boolean} [staticObject] set to true if the object's position/size does not change\n     * @return {DisplayObjectWithCulling} object\n     */\n    add(object: DisplayObjectWithCulling, staticObject?: boolean): DisplayObjectWithCulling {\n        if (staticObject) {\n            object.staticObject = true\n        }\n        if (this.dirtyTest || staticObject) {\n            this.updateObject(object)\n        }\n        this.lists[0].push(object)\n        return object\n    }\n\n    /**\n     * remove an object added by add()\n     * NOTE: for implementation, add and remove uses this.lists[0]\n     *\n     * @param {DisplayObjectWithCulling} object\n     * @return {DisplayObjectWithCulling} object\n     */\n    remove(object: DisplayObjectWithCulling): DisplayObjectWithCulling {\n        this.lists[0].splice(this.lists[0].indexOf(object), 1)\n        return object\n    }\n\n    /**\n     * cull the items in the list by changing the object.visible\n     * @param {AABB} bounds\n     * @param {boolean} [skipUpdate] skip updating the AABB bounding box of all objects\n     */\n    cull(bounds: AABB, skipUpdate?: boolean) {\n        if (!skipUpdate) {\n            this.updateObjects()\n        }\n        const visible = this.visible\n        for (const list of this.lists) {\n            const length = list.length\n            for (let i = 0; i < length; i++) {\n                const object = list[i]\n                const box = object.AABB\n                object[visible] =\n                    box.x + box.width > bounds.x && box.x < bounds.x + bounds.width &&\n                    box.y + box.height > bounds.y && box.y < bounds.y + bounds.height\n            }\n        }\n    }\n\n    /**\n     * update the AABB for all objects\n     * automatically called from update() when calculatePIXI=true and skipUpdate=false\n     */\n    updateObjects() {\n        if (this.dirtyTest) {\n            for (const list of this.lists) {\n                if (!list.staticObject) {\n                    const length = list.length\n                    for (let i = 0; i < length; i++) {\n                        const object = list[i]\n                        if (!object.staticObject && object.dirty) {\n                            this.updateObject(object)\n                            object.dirty = false\n                        }\n                    }\n                }\n            }\n        } else {\n            for (const list of this.lists) {\n                if (!list.staticObject) {\n                    const length = list.length\n                    for (let i = 0; i < length; i++) {\n                        const object = list[i]\n                        if (!object.staticObject) {\n                            this.updateObject(object)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * update the has of an object\n     * automatically called from updateObjects()\n     * @param {DisplayObjectWithCulling} object\n     */\n    updateObject(object: DisplayObjectWithCulling) {\n        const box = object.getLocalBounds()\n        object.AABB = object.AABB || { x: 0, y: 0, width: 0, height: 0 }\n        object.AABB.x = object.x + (box.x - object.pivot.x) * object.scale.x\n        object.AABB.y = object.y + (box.y - object.pivot.y) * object.scale.y\n        object.AABB.width = box.width * object.scale.x\n        object.AABB.height = box.height * object.scale.y\n    }\n\n    /**\n     * returns an array of objects contained within bounding box\n     * @param {AABB} bounds bounding box to search\n     * @return {DisplayObjectWithCulling[]} search results\n     */\n    query(bounds: AABB): DisplayObjectWithCulling[] {\n        let results = []\n        for (let list of this.lists) {\n            for (let object of list) {\n                const box = object.AABB\n                if (box.x + box.width > bounds.x && box.x - box.width < bounds.x + bounds.width &&\n                    box.y + box.height > bounds.y && box.y - box.height < bounds.y + bounds.height) {\n                    results.push(object)\n                }\n            }\n        }\n        return results\n    }\n\n    /**\n     * iterates through objects contained within bounding box\n     * stops iterating if the callback returns true\n     * @param {AABB} bounds bounding box to search\n     * @param {function} callback\n     * @return {boolean} true if callback returned early\n     */\n    queryCallback(bounds: AABB, callback: (object: DisplayObjectWithCulling) => boolean): boolean {\n        for (let list of this.lists) {\n            for (let object of list) {\n                const box = object.AABB\n                if (box.x + box.width > bounds.x && box.x - box.width < bounds.x + bounds.width &&\n                    box.y + box.height > bounds.y && box.y - box.height < bounds.y + bounds.height) {\n                    if (callback(object)) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n\n    /**\n     * get stats (only updated after update() is called)\n     * @return {SimpleStats}\n     */\n    stats(): SimpleStats {\n        let visible = 0, count = 0\n        for (let list of this.lists) {\n            list.forEach(object => {\n                visible += object.visible ? 1 : 0\n                count++\n            })\n        }\n        return { total: count, visible, culled: count - visible }\n    }\n}\n","import * as PIXI from 'pixi.js'\nimport { DisplayObjectWithCulling, AABB } from './types'\n\nexport interface SpatialHashOptions {\n    size?: number\n    xSize?: number\n    ySize?: number\n    simpleTest?: boolean\n    dirtyTest?: boolean\n}\n\nexport interface ContainerCullObject {\n    static?: boolean\n    added?: (object: DisplayObjectWithCulling) => void\n    removed?: (object: DisplayObjectWithCulling) => void\n}\n\nexport interface SpatialHashStats {\n    buckets: number\n    total: number\n    visible: number\n    culled: number\n}\n\ninterface SpatialHashBounds {\n    xStart: number\n    yStart: number\n    xEnd: number\n    yEnd: number\n}\n\nexport interface ContainerWithCulling extends PIXI.Container {\n    cull?: ContainerCullObject\n}\n\nconst SpatialHashDefaultOptions: SpatialHashOptions = {\n    xSize: 1000,\n    ySize: 1000,\n    simpleTest: true,\n    dirtyTest: true,\n}\n\nexport class SpatialHash {\n    protected xSize: number\n    protected ySize: number\n\n    /** simpleTest toggle */\n    public simpleTest: boolean\n\n    /** dirtyTest toggle */\n    public dirtyTest: boolean\n\n    protected width: number\n    protected height: number\n    protected hash: object\n\n    /** array of PIXI.Containers added using addContainer()  */\n    protected containers: ContainerWithCulling[]\n\n    /** array of DisplayObjects added using add() */\n    protected elements: DisplayObjectWithCulling[]\n\n\n    protected objects: DisplayObjectWithCulling[]\n    // protected hash: <string,\n    protected lastBuckets: number\n\n    /**\n     * creates a spatial-hash cull\n     * Note, options.dirtyTest defaults to false. To greatly improve performance set to true and set\n     * displayObject.dirty=true when the displayObject changes)\n     *\n     * @param {object} [options]\n     * @param {number} [options.size=1000] cell size used to create hash (xSize = ySize)\n     * @param {number} [options.xSize] horizontal cell size (leave undefined if size is set)\n     * @param {number} [options.ySize] vertical cell size (leave undefined if size is set)\n     * @param {boolean} [options.simpleTest=true] after finding visible buckets, iterates through items and tests individual bounds\n     * @param {string} [options.dirtyTest=false] only update spatial hash for objects with object.dirty=true; this has a HUGE impact on performance\n     */\n    constructor(options?: SpatialHashOptions) {\n        options = { ...SpatialHashDefaultOptions, ...options }\n        if (options && typeof options.size !== 'undefined') {\n            this.xSize = this.ySize = options.size\n        } else {\n            this.xSize = options.xSize\n            this.ySize = options.ySize\n        }\n        this.simpleTest = options.simpleTest\n        this.dirtyTest = options.dirtyTest\n        this.width = this.height = 0\n        this.hash = {}\n        this.containers = []\n        this.elements = []\n    }\n\n    /**\n     * add an object to be culled\n     * side effect: adds object.spatialHashes to track existing hashes\n     * @param {DisplayObjectWithCulling} object\n     * @param {boolean} [staticObject] set to true if the object's position/size does not change\n     * @return {DisplayObjectWithCulling} object\n     */\n    add(object: DisplayObjectWithCulling, staticObject?: boolean): DisplayObjectWithCulling {\n        object.spatial = { hashes: [] }\n        if (this.dirtyTest) {\n            object.dirty = true\n        }\n        if (staticObject) {\n            object.staticObject = true\n        }\n        this.updateObject(object)\n        this.elements.push(object)\n        return object\n    }\n\n    /**\n     * remove an object added by add()\n     * @param {*} object\n     * @return {*} object\n     */\n    remove(object: DisplayObjectWithCulling): DisplayObjectWithCulling {\n        this.elements.splice(this.elements.indexOf(object), 1)\n        this.removeFromHash(object)\n        return object\n    }\n\n    /**\n     * add an array of objects to be culled\n     * @param {PIXI.Container} container\n     * @param {boolean} [staticObject] set to true if the objects in the container's position/size do not change\n     * note: this only works with pixi v5.0.0rc2+ because it relies on the new container events childAdded and childRemoved\n     */\n    addContainer(container: ContainerWithCulling, staticObject?: boolean) {\n        const added = (object: DisplayObjectWithCulling) => {\n            object.spatial = { hashes: [] }\n            this.updateObject(object)\n        }\n\n        const removed = (object: DisplayObjectWithCulling) => {\n            this.removeFromHash(object)\n        }\n\n        const length = container.children.length\n        for (let i = 0; i < length; i++) {\n            const object = container.children[i] as DisplayObjectWithCulling\n            object.spatial = { hashes: [] }\n            this.updateObject(object)\n        }\n        container.cull = {}\n        this.containers.push(container)\n        container.on('childAdded', added)\n        container.on('childRemoved', removed)\n        container.cull.added = added\n        container.cull.removed = removed\n        if (staticObject) {\n            container.cull.static = true\n        }\n    }\n\n    /**\n     * remove an array added by addContainer()\n     * @param {PIXI.Container} container\n     * @return {PIXI.Container} container\n     */\n    removeContainer(container: ContainerWithCulling): ContainerWithCulling {\n        this.containers.splice(this.containers.indexOf(container), 1)\n        container.children.forEach(object => this.removeFromHash(object))\n        container.off('childAdded', container.cull.added)\n        container.off('removedFrom', container.cull.removed)\n        delete container.cull\n        return container\n    }\n\n    /**\n     * update the hashes and cull the items in the list\n     * @param {AABB} AABB\n     * @param {boolean} [skipUpdate] skip updating the hashes of all objects\n     * @param {Function} [callback] callback for each item that is not culled - note, this function is called before setting `object.visible=true`\n     * @return {number} number of buckets in results\n     */\n    cull(AABB: AABB, skipUpdate?: boolean, callback?: (object: DisplayObjectWithCulling) => boolean): number {\n        if (!skipUpdate) {\n            this.updateObjects()\n        }\n        this.invisible()\n        let objects: DisplayObjectWithCulling[]\n        if (callback) {\n            objects = this.queryCallbackAll(AABB, this.simpleTest, callback)\n        } else {\n            objects = this.query(AABB, this.simpleTest)\n        }\n        objects.forEach(object => object.visible = true)\n        return this.lastBuckets\n    }\n\n    /**\n     * set all objects in hash to visible=false\n     */\n    invisible() {\n        const length = this.elements.length\n        for (let i = 0; i < length; i++) {\n            this.elements[i].visible = false\n        }\n        for (const container of this.containers) {\n            const length = container.children.length\n            for (let i = 0; i < length; i++) {\n                container.children[i].visible = false\n            }\n        }\n    }\n\n    /**\n     * update the hashes for all objects\n     * automatically called from update() when skipUpdate=false\n     */\n    updateObjects() {\n        if (this.dirtyTest) {\n            const length = this.elements.length\n            for (let i = 0; i < length; i++) {\n                const object = this.elements[i]\n                if (object.dirty) {\n                    this.updateObject(object)\n                    object.dirty = false\n                }\n            }\n            for (const container of this.containers) {\n                if (!container.cull.static) {\n                    const length = container.children.length\n                    for (let i = 0; i < length; i++) {\n                        const object = container.children[i] as DisplayObjectWithCulling\n                        if (object.dirty) {\n                            this.updateObject(object)\n                            object.dirty = false\n                        }\n                    }\n                }\n            }\n        } else {\n            const length = this.elements.length\n            for (let i = 0; i < length; i++) {\n                const object = this.elements[i]\n                if (!object.staticObject) {\n                    this.updateObject(object)\n                }\n            }\n            for (let container of this.containers) {\n                if (!container.cull.static) {\n                    const length = container.children.length\n                    for (let i = 0; i < length; i++) {\n                        this.updateObject(container.children[i])\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * update the has of an object\n     * automatically called from updateObjects()\n     * @param {DisplayObjectWithCulling} object\n     */\n    updateObject(object: DisplayObjectWithCulling) {\n        let AABB: AABB\n        const box = object.getLocalBounds()\n        AABB = object.AABB = {\n            x: object.x + (box.x - object.pivot.x) * object.scale.x,\n            y: object.y + (box.y - object.pivot.y) * object.scale.y,\n            width: box.width * object.scale.x,\n            height: box.height * object.scale.y\n        }\n\n        let spatial = object.spatial\n        if (!spatial) {\n            spatial = object.spatial = { hashes: [] }\n        }\n        const { xStart, yStart, xEnd, yEnd } = this.getBounds(AABB)\n\n        // only remove and insert if mapping has changed\n        if (spatial.xStart !== xStart || spatial.yStart !== yStart || spatial.xEnd !== xEnd || spatial.yEnd !== yEnd) {\n            if (spatial.hashes.length) {\n                this.removeFromHash(object)\n            }\n            for (let y = yStart; y <= yEnd; y++) {\n                for (let x = xStart; x <= xEnd; x++) {\n                    const key = x + ',' + y\n                    this.insert(object, key)\n                    spatial.hashes.push(key)\n                }\n            }\n            spatial.xStart = xStart\n            spatial.yStart = yStart\n            spatial.xEnd = xEnd\n            spatial.yEnd = yEnd\n        }\n    }\n\n    /**\n     * returns an array of buckets with >= minimum of objects in each bucket\n     * @param {number} [minimum=1]\n     * @return {array} array of buckets\n     */\n    getBuckets(minimum: number = 1): string[] {\n        const hashes = []\n        for (const key in this.hash) {\n            const hash = this.hash[key]\n            if (hash.length >= minimum) {\n                hashes.push(hash)\n            }\n        }\n        return hashes\n    }\n\n    /**\n     * gets hash bounds\n     * @param {AABB} AABB\n     * @return {SpatialHashBounds}\n     */\n    protected getBounds(AABB: AABB): SpatialHashBounds {\n        const xStart = Math.floor(AABB.x / this.xSize)\n        const yStart = Math.floor(AABB.y / this.ySize)\n        const xEnd = Math.floor((AABB.x + AABB.width) / this.xSize)\n        const yEnd = Math.floor((AABB.y + AABB.height) / this.ySize)\n        return { xStart, yStart, xEnd, yEnd }\n    }\n\n    /**\n     * insert object into the spatial hash\n     * automatically called from updateObject()\n     * @param {DisplayObjectWithCulling} object\n     * @param {string} key\n     */\n    insert(object: DisplayObjectWithCulling, key: string) {\n        if (!this.hash[key]) {\n            this.hash[key] = [object]\n        } else {\n            this.hash[key].push(object)\n        }\n    }\n\n    /**\n     * removes object from the hash table\n     * should be called when removing an object\n     * automatically called from updateObject()\n     * @param {object} object\n     */\n    removeFromHash(object: DisplayObjectWithCulling) {\n        const spatial = object.spatial\n        while (spatial.hashes.length) {\n            const key = spatial.hashes.pop()\n            const list = this.hash[key]\n            list.splice(list.indexOf(object), 1)\n        }\n    }\n\n    /**\n     * get all neighbors that share the same hash as object\n     * @param {*} object in the spatial hash\n     * @return {Array} of objects that are in the same hash as object\n     */\n    neighbors(object: DisplayObjectWithCulling): DisplayObjectWithCulling[] {\n        let results = []\n        object.spatial.hashes.forEach(key => results = results.concat(this.hash[key]))\n        return results\n    }\n\n    /**\n     * returns an array of objects contained within bounding box\n     * @param {AABB} AABB bounding box to search\n     * @param {boolean} [simpleTest=true] perform a simple bounds check of all items in the buckets\n     * @return {object[]} search results\n     */\n    query(AABB: AABB, simpleTest: boolean = true): DisplayObjectWithCulling[] {\n        let buckets = 0\n        let results = []\n        const { xStart, yStart, xEnd, yEnd } = this.getBounds(AABB)\n        for (let y = yStart; y <= yEnd; y++) {\n            for (let x = xStart; x <= xEnd; x++) {\n                const entry = this.hash[x + ',' + y]\n                if (entry) {\n                    if (simpleTest) {\n                        const length = entry.length\n                        for (let i = 0; i < length; i++) {\n                            const object = entry[i]\n                            const box = object.AABB\n                            if (box.x + box.width > AABB.x && box.x < AABB.x + AABB.width &&\n                                box.y + box.height > AABB.y && box.y < AABB.y + AABB.height) {\n                                results.push(object)\n                            }\n                        }\n                    } else {\n                        results = results.concat(entry)\n                    }\n                    buckets++\n                }\n            }\n        }\n        this.lastBuckets = buckets\n        return results\n    }\n\n    /**\n     * returns an array of objects contained within bounding box with a callback on each non-culled object\n     * this function is different from queryCallback, which cancels the query when a callback returns true\n     *\n     * @param {AABB} AABB bounding box to search\n     * @param {boolean} [simpleTest=true] perform a simple bounds check of all items in the buckets\n     * @param {Function} callback - function to run for each non-culled object\n     * @return {object[]} search results\n     */\n    queryCallbackAll(AABB: AABB, simpleTest: boolean = true, callback: (object: DisplayObjectWithCulling) => boolean): DisplayObjectWithCulling[] {\n        let buckets = 0\n        let results = []\n        const { xStart, yStart, xEnd, yEnd } = this.getBounds(AABB)\n        for (let y = yStart; y <= yEnd; y++) {\n            for (let x = xStart; x <= xEnd; x++) {\n                const entry = this.hash[x + ',' + y]\n                if (entry) {\n                    if (simpleTest) {\n                        const length = entry.length\n                        for (let i = 0; i < length; i++) {\n                            const object = entry[i]\n                            const box = object.AABB\n                            if (box.x + box.width > AABB.x && box.x < AABB.x + AABB.width &&\n                                box.y + box.height > AABB.y && box.y < AABB.y + AABB.height) {\n                                results.push(object)\n                                callback(object)\n                            }\n                        }\n                    } else {\n                        results = results.concat(entry)\n                        for (const object of entry) {\n                            callback(object)\n                        }\n                    }\n                    buckets++\n                }\n            }\n        }\n        this.lastBuckets = buckets\n        return results\n    }\n\n    /**\n     * iterates through objects contained within bounding box\n     * stops iterating if the callback returns true\n     * @param {AABB} AABB bounding box to search\n     * @param {function} callback\n     * @param {boolean} [simpleTest=true] perform a simple bounds check of all items in the buckets\n     * @return {boolean} true if callback returned early\n     */\n    queryCallback(AABB: AABB, callback: (object: DisplayObjectWithCulling) => boolean, simpleTest: boolean = true): boolean {\n        const { xStart, yStart, xEnd, yEnd } = this.getBounds(AABB)\n        for (let y = yStart; y <= yEnd; y++) {\n            for (let x = xStart; x <= xEnd; x++) {\n                const entry = this.hash[x + ',' + y]\n                if (entry) {\n                    for (let i = 0; i < entry.length; i++) {\n                        const object = entry[i]\n                        if (simpleTest) {\n                            const AABB = object.AABB\n                            if (AABB.x + AABB.width > AABB.x && AABB.x < AABB.x + AABB.width &&\n                                AABB.y + AABB.height > AABB.y && AABB.y < AABB.y + AABB.height) {\n                                if (callback(object)) {\n                                    return true\n                                }\n                            }\n                        } else {\n                            if (callback(object)) {\n                                return true\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false\n    }\n\n    /**\n     * Get stats\n     * @return {SpatialHashStats}\n     */\n    stats(): SpatialHashStats {\n        let visible = 0, count = 0\n        const length = this.elements.length\n        for (let i = 0; i < length; i++) {\n            const object = this.elements[i]\n            visible += object.visible ? 1 : 0\n            count++\n        }\n        for (const list of this.containers) {\n            const length = list.children.length\n            for (let i = 0; i < length; i++) {\n                const object = list.children[i]\n                visible += object.visible ? 1 : 0\n                count++\n            }\n        }\n        return {\n            buckets: this.lastBuckets,\n            total: count,\n            visible,\n            culled: count - visible\n        }\n    }\n\n    /**\n     * helper function to evaluate hash table\n     * @return {number} the number of buckets in the hash table\n     * */\n    getNumberOfBuckets(): number {\n        return Object.keys(this.hash).length\n    }\n\n    /**\n     * helper function to evaluate hash table\n     * @return {number} the average number of entries in each bucket\n     */\n    getAverageSize(): number {\n        let total = 0\n        for (let key in this.hash) {\n            total += this.hash[key].length\n        }\n        return total / this.getBuckets().length\n    }\n\n    /**\n     * helper function to evaluate the hash table\n     * @return {number} the largest sized bucket\n     */\n    getLargest(): number {\n        let largest = 0\n        for (let key in this.hash) {\n            if (this.hash[key].length > largest) {\n                largest = this.hash[key].length\n            }\n        }\n        return largest\n    }\n\n    /**\n     * gets quadrant bounds\n     * @return {SpatialHashBounds}\n     */\n    getWorldBounds(): SpatialHashBounds {\n        let xStart = Infinity, yStart = Infinity, xEnd = 0, yEnd = 0\n        for (let key in this.hash) {\n            const split = key.split(',')\n            let x = parseInt(split[0])\n            let y = parseInt(split[1])\n            xStart = x < xStart ? x : xStart\n            yStart = y < yStart ? y : yStart\n            xEnd = x > xEnd ? x : xEnd\n            yEnd = y > yEnd ? y : yEnd\n        }\n        return { xStart, yStart, xEnd, yEnd }\n    }\n\n    /**\n     * helper function to evaluate the hash table\n     * @param {AABB} [AABB] bounding box to search or entire world\n     * @return {number} sparseness percentage (i.e., buckets with at least 1 element divided by total possible buckets)\n     */\n    getSparseness(AABB?: AABB): number {\n        let count = 0, total = 0\n        const { xStart, yStart, xEnd, yEnd } = AABB ? this.getBounds(AABB) : this.getWorldBounds()\n        for (let y = yStart; y < yEnd; y++) {\n            for (let x = xStart; x < xEnd; x++) {\n                count += (this.hash[x + ',' + y] ? 1 : 0)\n                total++\n            }\n        }\n        return count / total\n    }\n}\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","defaultSimpleOptions","visible","dirtyTest","options","lists","Simple","array","staticObject","push","updateObject","splice","indexOf","object","bounds","skipUpdate","updateObjects","_a","_i","list","length_1","box","AABB","x","width","y","height","length_2","dirty","_c","_b","length_3","getLocalBounds","pivot","scale","results","list_1","callback","list_2","count","forEach","total","culled","SpatialHashDefaultOptions","xSize","ySize","simpleTest","size","hash","containers","elements","SpatialHash","spatial","hashes","removeFromHash","container","added","_this","removed","children","cull","on","static","off","invisible","queryCallbackAll","query","lastBuckets","length_4","length_5","getBounds","xStart","yStart","xEnd","yEnd","key","insert","minimum","Math","floor","pop","concat","buckets","entry","length_6","length_7","entry_1","AABB_1","length_8","keys","getBuckets","largest","Infinity","split","parseInt","getWorldBounds"],"mappings":"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"}